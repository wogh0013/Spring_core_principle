<좋은객체지향설계원칙>
1.SRP 단일 책임 원칙
 - 한 클래스는 하나의 책임만 가져야 한다.
 - 관심사 분리
 - 클라이언트 객체 : 실행 담당
 - AppConfig : 구현 객체 생성 및 연결 담당

2. DIP 의존관계 역전 원칙
 - 프로그래머는 "추상화에 의존해야지, 구체화에 의존해선 안된다."
   의존성 주입은 이 원칙을 따르는 방법 중 하나다.
 - 클라이언트 코드가 추상화 인터페이스(DiscountPolicy)에만 의존하도록 코드 변경.
 - 하지만 클라이언트 코드는 인터페이스만으로는 아무것도 못함.
    -> AppConfig가 클라이언트 코드 대신 구현 클래스(FixDiscountPolicy)를 생성한 후,
       클라이언트 코드에 의존관계 주입.

3. OCP
 - 소프트웨어 요소는 확장에는 열려있으나, 변경에는 닫혀있어야 한다.
 - 애플리케이션(사용 영역 + 구성 영역)
 - AppConfig가 의존관계를 FixDiscountPolicy -> RateDiscountPolicy롤 변경해서
   클라이언트 코드에 주입하므로 클라이언트 코드는 변경하지 않아도 됨.
 - 소프트웨어 요소를 새롭게 확장해도 사용 영역의 변경은 닫혀있다.



 ----------
IoC(제어의 역전) : 프로그램의 제어 흐름을 직접 제어하는 것이 아니라, 외부(여기선 AppConfig)에서 관리하는 것.

 프레임워크 : 프레임워크가 내가 작성한 코드를 제어하고, 대신 실행 (JUnit)
 라이브러리 : 내가 작성한 코드가 직접 제어의 흐름을 담당


DI(의존관계 주입) : OrderServiceImpl은 DiscountPolicy인터페이스에 의존한다.
                 실제 어떤 구현 객체가 사용될지는 모른다.
                 - 애플리케이션 실행시점(런타임)에 외부에서 실제 구현 객체를 생성 -> 클라이언트에 전달
                   -> 클라이언트와 서버의 실제 의존관계가 연결되는 것.
                 - 의존관계 주입 사용 -> 정적인 클래스 의존관계를 변경하지 않고, 동적인 클래스 의존관계 변경 가능
 의존관계
 1. 정적인 클래스 의존 관계 : 애플리케이션을 실행하지 않아도, import 코드만 보고 의존관계 파악
 2. 동적인 클래스 의존 관계 : 애플리케이션 실행 전에는 의존관계를 모름.(실행 시점에 의존관계 연결)


 DI(IoC) 컨테이너 : 객체를 생서하고 관리하면서 의존관계를 연결해주는 것(여기서는 AppConfig)