인터넷 프로토콜 스택 4계층
  1. 애플리케이션 계층 - HTTP, FTP
  2. 전송 계층 - TCP, UDP
  3. 인터넷 계층 - IP
  4. 네트워크 인터페이스 계층


TCP (전송 제어 프로토콜, Transmission Control Protocol)
 1. 연결지향 - TCP 3 way handshake(가상 연결)
 2. 데이터 전달 보증
 3. 순서 보장
 4. 신뢰할 수 있는 프로토콜
 5. 현재는 대부분 TCP 사용
 6. PORT 사용
 
IP가 아파트, PORT는 몇 동 몇 호~ 
IP : 목적지 서버를 찾는 것
PORT : 같은 IP 내에서 프로세스 구분
       서버 안에서 애플리케이션들을 구분하는 것
출발지 PORT, 목적지 PORT

IP : 지정한 IP 주소에 패킷 단위로 데이터 전달
    BUT 비연결성, 비신뢰성, 포트 X 라는 한계점 존재

IP는 변경될 수 있다. IP는 기억하기 쉽지 않다.
 -> DNS(Domain Name System)
 -> 도메인명을 IP주소로 변환 

URI (Uniform Resource Identifier) - 소스를 식별하는 통합된 방법
1. Uniform    : 리소스를 식별하는 통일된 방식
2. Resource   : 자원, URI로 식별할 수 있는 모든 것
3. Identifier : 다른 항목과 구분하는 데 필요한 정보
 - URL (Uniform Resource Locator) : 리소스가 있는 위치를 지정
 - URN (Uniform Resource Name)    : 리소스의 이름 
 - 위치는 변할 수 있지만, 이름은 변하지 않는다.
 - URI 와 URL은 거의 같은 의미임.

 URL scheme
  scheme://[userinfo@]host[:port][/path][?query][#fragment]
  https://www.google.com:443/search?q=hello?hl=ko
    - 주로 프로토콜 사용(http, https, ftp 등)
    - 프로토콜 : 어떤 방식으로 자원에 접근할 것인가?하는 규칙
    - 주로 http는 80포트, https는 443포트 사용 (포트는 생략 가능)
    - https는 http에 보안 추가(HTTP Secure)
    - 요즘 대부분 https 사용

    - host : 호스트명, 도메인명 또는 IP주소를 직접 사용
    - port : 접속 포트, 일반적으로 생략, http 80, https 443
    - path : 리소스 경로, 계층적 구조 (/home/file1.jpg, /members/100 ..)
    - query : key=value 형태, ?로 시작, &로 추가 가능(?keyA=valueA&keyB=valueB)
             query parameter, query string 등으로 불림     
    - fragment : 서버에 전송되는 정보는 X, 잘 사용X

HTTP 메시지 전송
 1. 웹 브라우저가 HTTP 메시지 생성
 2. SOCKET 라이브러리를 통해 전달
  - A: TCP/IP 연결(IP, PORT)
  - B: 데이터 전달
 3. TCP/IP 패킷 생성, HTTP 메시지 포함


 HTTP(HyperText Transfer Protocol)
  : HTTP 메시지에 모든 것을 전송한다.
  - HTML, TEXT, IMAGE, 음성, 영상, 파일
  - JSON, XML (API) 등 거의 모든 형태의 데이터 전송 가능
  - 서버 간 데이터 전송도 대부분 HTTP 사용
  - 특징
   1. 클라이언트-서버 구조
     : 클라이언트가 Request(요청)를 보내면, 서버가 Response(응답)을 해서 동작
   2. 무상태 프로토콜(stateless), 비연결성
      stateless : 서버가 클라이언트의 상태를 보존 X
                  클라이언트 요청 증가 -> 서버 대거 투입 가능
                  응답 서버를 쉽게 바꿀 수 있음(무한한 서버 증설 가능)
                  웹을 설계할 때 최대한 무상태, 어쩔 수 없을 때만 상태유지
      비연결성 : 매우 빠른 속도로 응답
                수천 명이 서비스를 사용해도, 실제 서버에서 동시에 처리하는 요청은 적음
                서버 자원을 매우 효율적으로 사용 가능
                But, TCP/IP 연결을 새로 해야 함 -> 시간 낭비
                      -> 지속 연결(Persistent Connections)로 문제 해결                   
   3. HTTP 메시지
   4. 단순함, 확장 가능

HTTP 메시지 구조
 1. start-line 시작 라인
  - request-line(요청 메시지) 
    1) HTTP 메서드 (GET, POST, DELETE ..) 
    2) 요청 대상 (\절대경로[?쿼리])
    3) HTTP 버전
  - status-line(응답 메시지)
    1) HTTP 버전
    2) HTTP 상태 코드(요청 성공, 실패를 나타냄 / 200:성공, 400:클라이언트 요청 오류, 500:서버 내부 오류)
    3) 이유 문구
 2. HTTP header 헤더
  - HTTP 전송에 필요한 모든 부가정보가 들어가있음
 3. empty line 공백 라인 (CRLF)
 4. HTTP message body 바디
  - 실제 전송할 데이터
  - HTML 문서, 이미지, 영상, JSON 등 byte로 표현할 수 있는 모든 데이터 전송 가능
  
API URI 설계
 - 리소스란 ?
  ex) 회원을 등록, 수정하는 것이 리소스가 아니라
      회원이라는 개념 자체가 '리소스'이다.
 - 이 리소스를 URI에 매핑하면 된다.
 - URI는 리소스만 식별한다.
 - '리소스'와 해당 리소스를 대상으로 하는 '행위(메서드)'를 분리한다.
  리소스: 회원
  행위(메서드): 조회, 등록, 삭제, 변경 -> HTTP 메서드

HTTP 메서드: 클라이언트가 서버에 무언가를 요청할 때 기대하는 행동
             서버가 수행해야 할 동작 지정
 1. GET
  - 리소스 조회
  - 서버에 전달하고 싶은 데이터는 쿼리를 통해서 전달 
 2. POST
  - 요청 데이터 처리 
  - 메시지 바디를 통해 서버로 요청 데이터 전달 -> '서버야 데이터 처리해줘'
     -> 서버는 요청 데이터를 처리한다.
     -> 주로 전달된 데이터로 새로운 리스소 등록, 
        단순히 데이터를 다루는 것을 넘어 프로세스를 처리해야 할 때도 사용
  - 리소스 URI에 POST 요청이 오면, 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야 함
 3. PUT
  - 리소스가 있으면 '완전히' 대체함(덮어버림)
  - 리소스가 없으면 생성
  - 클라이언트가 리소스를 알고 있음(리소스 위치를 알고 URI 지정)
     -> POST와의 차이점
 4. PATCH
  - 리소스 '부분' 변경
 5. DELETE
  - 리소스 삭제

HTTP 메서드 특징
 1. 안전
  - 호출해도 리소스를 변경하지 않는다.
 2. 멱등 : 한 번 호출하든 백 번 호출하든 결과가 똑같다.
  - GET : 한 번 조회하든, 두 번 조회하든 같은 결과과 조회된다.
  - PUT : 결과를 대체한다. 따라서 같은 요청을 여러 번 해도 최종 결과는 같다.
  - DELETE : 결과를 삭제한다. 같은 요청을 여러 번 해도 삭제된 결과는 같다.
  - POST : 멱등이 아니다. 두 번 호출하면 같은 결제가 중복해서 발생할 수 있다.   
    * 멱등은 외부 요인으로 중간에 리소스가 변경되는 것까지는 고려하지 않는다.
      동일한 사용자가 똑같은 행동을 반복하는 것에 대해서만 고려한다.  
  3. 캐시 가능
   - 웹 브라우저가 내부에 저장(GET정도만 캐시로 사용)

클라이언트에서 서버로 데이터 전송
 - 데이터 전달 방식
  1. 쿼리 파라미터
   - GET
   - 주로 정렬 필터(검색어)
  2. 메시지 바디
   - POST, PUT, PATCH
   - 회원가입, 상품 주문, 리소스 등록, 리소스 변경

- 데이터를 전송하는 4가지 상황   
 1. 정적 데이터 조회
  - 이미지, 정적 텍스트 문서
 2. 동적 데이터 조회
  - 검색, 게시판 목록에서 정렬 필터(검색어)
  - 조회는 GET 사용, GET은 쿼리 파라미터를 사용해서 데이터 전달
 3. HTML Form을 통한 데이터 전송
  - sumbit 시 POST 전송(회원가입, 상품 주문, 데이터 변경)
  - ContentT-Type: application/x-www-form-urlencoded 사용 (form의 내용을 메시지 바디를 통해 전송, key=value 형식)
                   multipart/form-data (파일 업로드 같은 바이너리 데이터 전송 시 사용, 여러 개 함께 전송 가능)
  - GET 전송도 가능
  - 즉, Form 전송은 GET, POST만 지원
 4. HTTP API를 통한 데이터 전송
  - 회원가입, 상품 주문, 데이터 변경
  - 서버 to 서버(백엔드), 앱 클라이언트(아이폰, 안드로이드), 웹 클라이언트(Ajax)
  - GET: 조회 / 쿼리 파라미터로 데이터 전달
  - POST, PUT, PATCH: 메시지 바디로 데이터 전달
  - Content-Type: application/json을 주로 사용(표준), + XML  


































































